# 2.  Дан список:
#     ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
#
#     Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками (добавить кавычку до
#     и кавычку после элемента списка, являющегося числом) и дополнить нулём до двух целочисленных разрядов:
#     ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"', '+05', '"',
#       'градусов']
#
#     Сформировать из обработанного списка строку:
#     в "05" часов "17" минут температура воздуха была "+05" градусов
#
#     Подумать, какое условие записать, чтобы выявить числа среди элементов списка? Как модифицировать это условие для
#     чисел со знаком?
#     Примечание: если обособление чисел кавычками не будет получаться - можете вернуться к его реализации позже.
#     Главное: дополнить числа до двух разрядов нулём!
#
# 3. *(вместо задачи 2) Решить задачу 2 не создавая новый список (как говорят, in place). Эта задача намного серьёзнее,
#     чем может сначала показаться.

imput_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']

i = 0
output_str = ""  # join в конце использовать не можем, будет делать пробелы до и после кавычек (например " +05 ")
while i < len(imput_list):  # у списка из-за добавления новых элементов (") изменяется длинна, поэтому for а не while
    for x in range(len(imput_list[i])):  # пробегаемся по индексам символов текущей строки на i ой позиции списка
        if imput_list[i][x].isdigit():  # если обнаружена цифра - останавливаем цикл (32) и выполняем операции:
            if len(imput_list[i][x:]) < 2:  # проверям число разрядов обнаруженного числа
                imput_list[i] = imput_list[i][:x] + '0' + imput_list[i][x:]  # обогащаем нулем если меньше 2
            imput_list.insert(i, '"')  # вставляем кавычки до и после элемента списка где есть число
            imput_list.insert(i + 2, '"')
            output_str = output_str + imput_list[i] + imput_list[i + 1] + imput_list[i + 2] + " "
            i += 2  # !!!! из-за двух предыдущих строчек происходит зацикливание на бесконечном добавлении важно, что бы
            # !!! цикл перескочил на следующий элемент списка которым не является вновь добавленная "
            break
        elif x == (len(imput_list[i]) - 1):
            output_str = output_str + imput_list[i] + " "
    i += 1
# работает только для списка с цифрами перед которыми может быть префикс, для постфикса нужно модифицировать
print(imput_list)
print(output_str.rstrip())
